// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using AHM.Logistic.Smart.Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace AHM.Logistic.Smart.DataAccess.Context
{
    public partial class LOGISTIC_SMART_AHMContext : DbContext
    {
        public LOGISTIC_SMART_AHMContext()
        {
        }

        public LOGISTIC_SMART_AHMContext(DbContextOptions<LOGISTIC_SMART_AHMContext> options)
            : base(options)
        {
        }

        public virtual DbSet<View_Areas_List> View_Areas_List { get; set; }
        public virtual DbSet<View_ScreensPerRole_List> View_ScreensPerRole_List { get; set; }
        public virtual DbSet<View_Screens_List> View_Screens_List { get; set; }
        public virtual DbSet<View_UserPermits_SELECT> View_UserPermits_SELECT { get; set; }
        public virtual DbSet<View_tbCallBusiness_List> View_tbCallBusiness_List { get; set; }
        public virtual DbSet<View_tbCallResult_List> View_tbCallResult_List { get; set; }
        public virtual DbSet<View_tbCallType_List> View_tbCallType_List { get; set; }
        public virtual DbSet<View_tbCampaignDetails_List> View_tbCampaignDetails_List { get; set; }
        public virtual DbSet<View_tbCampaign_List> View_tbCampaign_List { get; set; }
        public virtual DbSet<View_tbCategories_List> View_tbCategories_List { get; set; }
        public virtual DbSet<View_tbComponents_List> View_tbComponents_List { get; set; }
        public virtual DbSet<View_tbContacts_List> View_tbContacts_List { get; set; }
        public virtual DbSet<View_tbCotizationsDetails_List> View_tbCotizationsDetails_List { get; set; }
        public virtual DbSet<View_tbCotizations_List> View_tbCotizations_List { get; set; }
        public virtual DbSet<View_tbCountries_List> View_tbCountries_List { get; set; }
        public virtual DbSet<View_tbCustomerCalls> View_tbCustomerCalls { get; set; }
        public virtual DbSet<View_tbCustomerNotes> View_tbCustomerNotes { get; set; }
        public virtual DbSet<View_tbCustomersFile_List> View_tbCustomersFile_List { get; set; }
        public virtual DbSet<View_tbCustomers_List> View_tbCustomers_List { get; set; }
        public virtual DbSet<View_tbCustomers_tbEmployees_List> View_tbCustomers_tbEmployees_List { get; set; }
        public virtual DbSet<View_tbDepartments_List> View_tbDepartments_List { get; set; }
        public virtual DbSet<View_tbEmployees_List> View_tbEmployees_List { get; set; }
        public virtual DbSet<View_tbMeetings_List> View_tbMeetings_List { get; set; }
        public virtual DbSet<View_tbModules_List> View_tbModules_List { get; set; }
        public virtual DbSet<View_tbModulosPantallas_List> View_tbModulosPantallas_List { get; set; }
        public virtual DbSet<View_tbMunicipalities_List> View_tbMunicipalities_List { get; set; }
        public virtual DbSet<View_tbOccupations_List> View_tbOccupations_List { get; set; }
        public virtual DbSet<View_tbPersons_List> View_tbPersons_List { get; set; }
        public virtual DbSet<View_tbPriorities_List> View_tbPriorities_List { get; set; }
        public virtual DbSet<View_tbProducts_List> View_tbProducts_List { get; set; }
        public virtual DbSet<View_tbRoleModuleItems_List> View_tbRoleModuleItems_List { get; set; }
        public virtual DbSet<View_tbRoles_List> View_tbRoles_List { get; set; }
        public virtual DbSet<View_tbSaleOrders_List> View_tbSaleOrders_List { get; set; }
        public virtual DbSet<View_tbSalesDetails_List> View_tbSalesDetails_List { get; set; }
        public virtual DbSet<View_tbSubCategories_List> View_tbSubCategories_List { get; set; }
        public virtual DbSet<View_tbUnits_List> View_tbUnits_List { get; set; }
        public virtual DbSet<View_tbUsers_List> View_tbUsers_List { get; set; }
        public virtual DbSet<tbAreas> tbAreas { get; set; }
        public virtual DbSet<tbCallBusiness> tbCallBusiness { get; set; }
        public virtual DbSet<tbCallResult> tbCallResult { get; set; }
        public virtual DbSet<tbCallType> tbCallType { get; set; }
        public virtual DbSet<tbCampaign> tbCampaign { get; set; }
        public virtual DbSet<tbCampaignDetails> tbCampaignDetails { get; set; }
        public virtual DbSet<tbCategories> tbCategories { get; set; }
        public virtual DbSet<tbComponents> tbComponents { get; set; }
        public virtual DbSet<tbContacts> tbContacts { get; set; }
        public virtual DbSet<tbCotizations> tbCotizations { get; set; }
        public virtual DbSet<tbCotizationsDetail> tbCotizationsDetail { get; set; }
        public virtual DbSet<tbCountries> tbCountries { get; set; }
        public virtual DbSet<tbCustomerCalls> tbCustomerCalls { get; set; }
        public virtual DbSet<tbCustomerNotes> tbCustomerNotes { get; set; }
        public virtual DbSet<tbCustomers> tbCustomers { get; set; }
        public virtual DbSet<tbCustomersFile> tbCustomersFile { get; set; }
        public virtual DbSet<tbDepartments> tbDepartments { get; set; }
        public virtual DbSet<tbEmployees> tbEmployees { get; set; }
        public virtual DbSet<tbEventLog> tbEventLog { get; set; }
        public virtual DbSet<tbEventLogType> tbEventLogType { get; set; }
        public virtual DbSet<tbMarketingDetails> tbMarketingDetails { get; set; }
        public virtual DbSet<tbMarketingHeaders> tbMarketingHeaders { get; set; }
        public virtual DbSet<tbMeetings> tbMeetings { get; set; }
        public virtual DbSet<tbMeetingsDetails> tbMeetingsDetails { get; set; }
        public virtual DbSet<tbModuleItems> tbModuleItems { get; set; }
        public virtual DbSet<tbModules> tbModules { get; set; }
        public virtual DbSet<tbMunicipalities> tbMunicipalities { get; set; }
        public virtual DbSet<tbOccupations> tbOccupations { get; set; }
        public virtual DbSet<tbOrderDetails> tbOrderDetails { get; set; }
        public virtual DbSet<tbPersons> tbPersons { get; set; }
        public virtual DbSet<tbPriorities> tbPriorities { get; set; }
        public virtual DbSet<tbProducts> tbProducts { get; set; }
        public virtual DbSet<tbRoleModuleItems> tbRoleModuleItems { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbSaleOrders> tbSaleOrders { get; set; }
        public virtual DbSet<tbStates> tbStates { get; set; }
        public virtual DbSet<tbSubCategories> tbSubCategories { get; set; }
        public virtual DbSet<tbTypeChannels> tbTypeChannels { get; set; }
        public virtual DbSet<tbUnits> tbUnits { get; set; }
        public virtual DbSet<tbUsers> tbUsers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<View_Areas_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Areas_List", "Gral");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.are_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.are_DateModified).HasColumnType("datetime");

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_ScreensPerRole_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ScreensPerRole_List", "Acce");

                entity.Property(e => e.mit_Descripction).HasMaxLength(150);

                entity.Property(e => e.rol_Description).HasMaxLength(50);
            });

            modelBuilder.Entity<View_Screens_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Screens_List", "Acce");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mit_Descripction)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<View_UserPermits_SELECT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_UserPermits_SELECT", "Acce");

                entity.Property(e => e.mit_Descripction)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.usu_UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbCallBusiness_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCallBusiness_List", "Clte");

                entity.Property(e => e.cabu_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cabu_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<View_tbCallResult_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCallResult_List", "Clte");

                entity.Property(e => e.caru_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.caru_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<View_tbCallType_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCallType_List", "Clte");

                entity.Property(e => e.cati_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cati_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<View_tbCampaignDetails_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCampaignDetails_List", "Vent");

                entity.Property(e => e.cam_Nombre).HasMaxLength(100);

                entity.Property(e => e.cus_Email).HasMaxLength(100);

                entity.Property(e => e.cus_Name).HasMaxLength(200);

                entity.Property(e => e.cus_Phone).HasMaxLength(30);
            });

            modelBuilder.Entity<View_tbCampaign_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCampaign_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cam_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cam_Html).IsRequired();

                entity.Property(e => e.cam_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usu_UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbCategories_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCategories_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cat_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cat_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cat_Description)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbComponents_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbComponents_List", "Acce");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.com_Description)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.com_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<View_tbContacts_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbContacts_List", "Clte");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cont_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cont_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cont_Email).HasMaxLength(100);

                entity.Property(e => e.cont_LastName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cont_Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cont_Phone)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cus_Name).HasMaxLength(200);

                entity.Property(e => e.occ_Description).HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbCotizationsDetails_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCotizationsDetails_List", "Acce");

                entity.Property(e => e.code_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.code_DateModified).HasColumnType("datetime");

                entity.Property(e => e.code_TotalPrice).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.cot_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cot_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cot_DateValidUntil).HasColumnType("datetime");
            });

            modelBuilder.Entity<View_tbCotizations_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCotizations_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cot_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cot_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cot_DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.cus_Email).HasMaxLength(100);

                entity.Property(e => e.cus_Name).HasMaxLength(200);

                entity.Property(e => e.cus_Phone).HasMaxLength(30);

                entity.Property(e => e.cus_RTN).HasMaxLength(14);

                entity.Property(e => e.mun_Description).HasMaxLength(100);

                entity.Property(e => e.sta_Description).HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbCountries_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCountries_List", "Gral");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cou_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cou_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cou_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbCustomerCalls>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCustomerCalls", "Clte");

                entity.Property(e => e.Status)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.cabu_Description).HasMaxLength(100);

                entity.Property(e => e.caru_Description).HasMaxLength(100);

                entity.Property(e => e.cati_Description).HasMaxLength(100);

                entity.Property(e => e.cca_Date).HasColumnType("date");

                entity.Property(e => e.cca_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cca_EndTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.cca_StartTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.cca_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cus_Name).HasMaxLength(200);
            });

            modelBuilder.Entity<View_tbCustomerNotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCustomerNotes", "Clte");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cun_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cun_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cun_Descripcion).IsRequired();

                entity.Property(e => e.cun_ExpirationDate).HasColumnType("date");

                entity.Property(e => e.cun_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cun_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cus_Name).HasMaxLength(200);

                entity.Property(e => e.pry_Descripcion).HasMaxLength(100);
            });

            modelBuilder.Entity<View_tbCustomersFile_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCustomersFile_List", "Clte");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cfi_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cus_Name).HasMaxLength(200);
            });

            modelBuilder.Entity<View_tbCustomers_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCustomers_List", "Clte");

                entity.Property(e => e.Estado)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cus_Address)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.cus_AnotherPhone).HasMaxLength(30);

                entity.Property(e => e.cus_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cus_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cus_Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cus_Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.cus_Phone)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.cus_RTN)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.Property(e => e.dep_Description).HasMaxLength(100);

                entity.Property(e => e.mun_Description).HasMaxLength(100);

                entity.Property(e => e.tyCh_Description).HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbCustomers_tbEmployees_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbCustomers_tbEmployees_List", "Clte");

                entity.Property(e => e.Id).HasMaxLength(30);

                entity.Property(e => e.Name).HasMaxLength(210);

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbDepartments_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbDepartments_List", "Gral");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cou_Description).HasMaxLength(100);

                entity.Property(e => e.dep_Code)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.dep_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.dep_DateModified).HasColumnType("datetime");

                entity.Property(e => e.dep_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbEmployees_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbEmployees_List", "Gral");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.emp_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.emp_DateModified).HasColumnType("datetime");

                entity.Property(e => e.occ_Description).HasMaxLength(100);

                entity.Property(e => e.per_Firstname).HasMaxLength(20);

                entity.Property(e => e.per_LastNames).HasMaxLength(20);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbMeetings_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbMeetings_List", "Clte");

                entity.Property(e => e.Status)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.cus_Name).HasMaxLength(200);

                entity.Property(e => e.met_Date).HasColumnType("date");

                entity.Property(e => e.met_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.met_EndTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.met_MeetingLink).IsRequired();

                entity.Property(e => e.met_StartTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.met_Title)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<View_tbModules_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbModules_List", "Acce");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.com_Description).HasMaxLength(150);

                entity.Property(e => e.mod_Description)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<View_tbModulosPantallas_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbModulosPantallas_List", "Acce");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mit_Descripction)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.mod_Description).HasMaxLength(50);
            });

            modelBuilder.Entity<View_tbMunicipalities_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbMunicipalities_List", "Gral");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.dep_Description).HasMaxLength(100);

                entity.Property(e => e.mun_Code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.mun_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.mun_DateModified).HasColumnType("datetime");

                entity.Property(e => e.mun_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbOccupations_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbOccupations_List", "Gral");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.occ_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.occ_DateModified).HasColumnType("datetime");

                entity.Property(e => e.occ_Description).HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbPersons_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbPersons_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.dep_Description).HasMaxLength(100);

                entity.Property(e => e.mun_Description).HasMaxLength(100);

                entity.Property(e => e.per_BirthDate).HasColumnType("date");

                entity.Property(e => e.per_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.per_DateModified).HasColumnType("datetime");

                entity.Property(e => e.per_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.per_Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.per_Esciv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.per_Firstname)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.per_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.per_LastNames)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.per_Phone)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.per_Secondname).HasMaxLength(20);

                entity.Property(e => e.per_Sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbPriorities_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbPriorities_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.pry_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.pry_DateModified).HasColumnType("datetime");

                entity.Property(e => e.pry_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pry_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pry_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbProducts_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbProducts_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.pro_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.pro_DateModified).HasColumnType("datetime");

                entity.Property(e => e.pro_Description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.pro_ISV).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.pro_PurchasePrice).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.pro_SalesPrice).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.scat_Description).HasMaxLength(100);

                entity.Property(e => e.uni_Description).HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbRoleModuleItems_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbRoleModuleItems_List", "Acce");

                entity.Property(e => e.mit_Descripction).HasMaxLength(150);

                entity.Property(e => e.rol_Description).HasMaxLength(50);
            });

            modelBuilder.Entity<View_tbRoles_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbRoles_List", "Acce");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.rol_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.rol_DateModified).HasColumnType("datetime");

                entity.Property(e => e.rol_Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbSaleOrders_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbSaleOrders_List", "Vent");

                entity.Property(e => e.Coti_Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cus_Email).HasMaxLength(100);

                entity.Property(e => e.cus_Name).HasMaxLength(200);

                entity.Property(e => e.cus_Phone).HasMaxLength(30);

                entity.Property(e => e.cus_RTN).HasMaxLength(14);

                entity.Property(e => e.mun_Description).HasMaxLength(100);

                entity.Property(e => e.sor_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.sor_DateModified).HasColumnType("datetime");

                entity.Property(e => e.sta_Description).HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbSalesDetails_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbSalesDetails_List", "Acce");

                entity.Property(e => e.ode_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.ode_DateModified).HasColumnType("datetime");

                entity.Property(e => e.ode_TotalPrice).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.sor_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.sor_DateModified).HasColumnType("datetime");
            });

            modelBuilder.Entity<View_tbSubCategories_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbSubCategories_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.cat_Description).HasMaxLength(300);

                entity.Property(e => e.scat_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.scat_DateModified).HasColumnType("datetime");

                entity.Property(e => e.scat_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbUnits_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbUnits_List", "Vent");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.uni_Abrevitation)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.uni_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.uni_DateModified).HasColumnType("datetime");

                entity.Property(e => e.uni_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<View_tbUsers_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tbUsers_List", "Acce");

                entity.Property(e => e.Status)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.per_PerName).HasMaxLength(41);

                entity.Property(e => e.rol_Description).HasMaxLength(50);

                entity.Property(e => e.usu_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.usu_DateModified).HasColumnType("datetime");

                entity.Property(e => e.usu_Password).IsRequired();

                entity.Property(e => e.usu_UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.usu_UserNameModified)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbAreas>(entity =>
            {
                entity.HasKey(e => e.are_Id)
                    .HasName("PK_Gral_tbAreas_are_Id");

                entity.ToTable("tbAreas", "Gral");

                entity.Property(e => e.are_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.are_DateModified).HasColumnType("datetime");
            });

            modelBuilder.Entity<tbCallBusiness>(entity =>
            {
                entity.HasKey(e => e.cabu_Id)
                    .HasName("PK_CallBusiness_cabu_Id");

                entity.ToTable("tbCallBusiness", "Clte");

                entity.Property(e => e.cabu_Description)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbCallResult>(entity =>
            {
                entity.HasKey(e => e.caru_Id)
                    .HasName("PK_CallResult_caru_Id");

                entity.ToTable("tbCallResult", "Clte");

                entity.Property(e => e.caru_Description)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbCallType>(entity =>
            {
                entity.HasKey(e => e.cati_Id)
                    .HasName("PK_CallType_cati_Id");

                entity.ToTable("tbCallType", "Clte");

                entity.Property(e => e.cati_Description)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbCampaign>(entity =>
            {
                entity.HasKey(e => e.cam_Id)
                    .HasName("PK_tbCampaign_cam_Id");

                entity.ToTable("tbCampaign", "Vent");

                entity.Property(e => e.cam_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cam_Html).IsRequired();

                entity.Property(e => e.cam_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbCampaignDetails>(entity =>
            {
                entity.HasKey(e => e.cde_Id)
                    .HasName("PK_tbCampaignDetails_cde_Id");

                entity.ToTable("tbCampaignDetails", "Vent");

                entity.HasOne(d => d.cam)
                    .WithMany(p => p.tbCampaignDetails)
                    .HasForeignKey(d => d.cam_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCampaignDetails_tbCampaign_cde_Id");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbCampaignDetails)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<tbCategories>(entity =>
            {
                entity.HasKey(e => e.cat_Id)
                    .HasName("PK_Vent_tbCategories_cat_Id");

                entity.ToTable("tbCategories", "Vent");

                entity.Property(e => e.cat_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cat_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cat_Description)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbComponents>(entity =>
            {
                entity.HasKey(e => e.com_Id)
                    .HasName("PK_Acce_tbComponentes_comp_Id");

                entity.ToTable("tbComponents", "Acce");

                entity.Property(e => e.com_Description)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<tbContacts>(entity =>
            {
                entity.HasKey(e => e.cont_Id)
                    .HasName("PK_Clte_tbContacts_cont_Id");

                entity.ToTable("tbContacts", "Clte");

                entity.Property(e => e.cont_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cont_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cont_Email).HasMaxLength(100);

                entity.Property(e => e.cont_LastName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cont_Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cont_Phone)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbContacts)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbContacts_tbCustomers_cus_Id");

                entity.HasOne(d => d.occ)
                    .WithMany(p => p.tbContacts)
                    .HasForeignKey(d => d.occ_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbContacts_tbOccupations_occ_Id");
            });

            modelBuilder.Entity<tbCotizations>(entity =>
            {
                entity.HasKey(e => e.cot_Id)
                    .HasName("PK_Vent_tbCotizations_cot_Id");

                entity.ToTable("tbCotizations", "Vent");

                entity.Property(e => e.cot_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cot_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cot_DateValidUntil).HasColumnType("datetime");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbCotizations)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbCotizations_cus_Id_Clte_tbCustomers_cus_Id");

                entity.HasOne(d => d.sta)
                    .WithMany(p => p.tbCotizations)
                    .HasForeignKey(d => d.sta_Id)
                    .HasConstraintName("FK_Vent_tbCotizations_sta_Id_Gral_tbStates_sta_Id");
            });

            modelBuilder.Entity<tbCotizationsDetail>(entity =>
            {
                entity.HasKey(e => e.code_Id)
                    .HasName("PK_Vent_tbCotizationsDetail_code_Id");

                entity.ToTable("tbCotizationsDetail", "Vent");

                entity.Property(e => e.code_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.code_DateModified).HasColumnType("datetime");

                entity.Property(e => e.code_TotalPrice).HasColumnType("decimal(12, 5)");

                entity.HasOne(d => d.cot)
                    .WithMany(p => p.tbCotizationsDetail)
                    .HasForeignKey(d => d.cot_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbCotizationsDetail_cot_Id_Vent_tbCotizations_cot_Id");
            });

            modelBuilder.Entity<tbCountries>(entity =>
            {
                entity.HasKey(e => e.cou_Id)
                    .HasName("PK_Gral_tbPais_depto_Id");

                entity.ToTable("tbCountries", "Gral");

                entity.Property(e => e.cou_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cou_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cou_Description)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbCustomerCalls>(entity =>
            {
                entity.HasKey(e => e.cca_Id)
                    .HasName("PK_Clte_tbCustomerCalls_cca_Id");

                entity.ToTable("tbCustomerCalls", "Clte");

                entity.Property(e => e.cca_Date).HasColumnType("date");

                entity.Property(e => e.cca_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cca_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cca_EndTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.cca_StartTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.HasOne(d => d.cca_BusinessNavigation)
                    .WithMany(p => p.tbCustomerCalls)
                    .HasForeignKey(d => d.cca_Business)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomerCalls_CallBusiness_cca_Business");

                entity.HasOne(d => d.cca_CallTypeNavigation)
                    .WithMany(p => p.tbCustomerCalls)
                    .HasForeignKey(d => d.cca_CallType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomerCalls_CallType_cati_Id");

                entity.HasOne(d => d.cca_ResultNavigation)
                    .WithMany(p => p.tbCustomerCalls)
                    .HasForeignKey(d => d.cca_Result)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomerCalls_CallResult_cca_Result");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbCustomerCalls)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomerCalls_cus_Id_Clte_tbCustomer_cus_Id");
            });

            modelBuilder.Entity<tbCustomerNotes>(entity =>
            {
                entity.HasKey(e => e.cun_Id)
                    .HasName("PK_Clte_tbCustomerNotes_cun_Id");

                entity.ToTable("tbCustomerNotes", "Clte");

                entity.Property(e => e.cun_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cun_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cun_Descripcion).IsRequired();

                entity.Property(e => e.cun_ExpirationDate).HasColumnType("date");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbCustomerNotes)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbtbCustomerNotes_tbCustomers_cus_Id");

                entity.HasOne(d => d.pry)
                    .WithMany(p => p.tbCustomerNotes)
                    .HasForeignKey(d => d.pry_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomerNotes_pry_Id_Clte_tbPriorities_pry_Id");
            });

            modelBuilder.Entity<tbCustomers>(entity =>
            {
                entity.HasKey(e => e.cus_Id)
                    .HasName("PK_Clte_tbCustomers_cus_Id");

                entity.ToTable("tbCustomers", "Clte");

                entity.Property(e => e.cus_Address)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.cus_AnotherPhone).HasMaxLength(30);

                entity.Property(e => e.cus_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cus_DateModified).HasColumnType("datetime");

                entity.Property(e => e.cus_Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cus_Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.cus_Phone)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.cus_RTN)
                    .IsRequired()
                    .HasMaxLength(14);

                entity.HasOne(d => d.cus_AssignedUserNavigation)
                    .WithMany(p => p.tbCustomers)
                    .HasForeignKey(d => d.cus_AssignedUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomers_Acce_tbUsers_usu_Id");

                entity.HasOne(d => d.tyCh)
                    .WithMany(p => p.tbCustomers)
                    .HasForeignKey(d => d.tyCh_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomers_tyCh_Id_Clte_tbTypeChannels_tyCh_Id");

                entity.HasOne(d => d.tbMunicipalities)
                    .WithMany(p => p.tbCustomers)
                    .HasForeignKey(d => new { d.mun_Id, d.dep_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbCustomers_Gral_tbMunicipalities_mun_Id");
            });

            modelBuilder.Entity<tbCustomersFile>(entity =>
            {
                entity.HasKey(e => e.cfi_Id)
                    .HasName("PK_Clte_tbCustomersFile_cfi_Id");

                entity.ToTable("tbCustomersFile", "Clte");

                entity.Property(e => e.cfi_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.cfi_DateModified).HasColumnType("datetime");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbCustomersFile)
                    .HasForeignKey(d => d.cus_Id)
                    .HasConstraintName("FK_Clte_tbCustomersFile_tbCustomers_cus_Id");
            });

            modelBuilder.Entity<tbDepartments>(entity =>
            {
                entity.HasKey(e => e.dep_Id)
                    .HasName("PK_Gral_tbDepartments_depto_Id");

                entity.ToTable("tbDepartments", "Gral");

                entity.Property(e => e.dep_Code)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.dep_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.dep_DateModified).HasColumnType("datetime");

                entity.Property(e => e.dep_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cou)
                    .WithMany(p => p.tbDepartments)
                    .HasForeignKey(d => d.cou_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbDepartments_tbPais_pai_Id");

                entity.HasOne(d => d.dep_IdUserCreateNavigation)
                    .WithMany(p => p.tbDepartmentsdep_IdUserCreateNavigation)
                    .HasForeignKey(d => d.dep_IdUserCreate)
                    .HasConstraintName("FK_Gral_tbUsers_tbDepartments_depto_IdUserCreate");

                entity.HasOne(d => d.dep_IdUserModifiedNavigation)
                    .WithMany(p => p.tbDepartmentsdep_IdUserModifiedNavigation)
                    .HasForeignKey(d => d.dep_IdUserModified)
                    .HasConstraintName("FK_Gral_tbUsers_tbDepartments_depto_IdUserModified");
            });

            modelBuilder.Entity<tbEmployees>(entity =>
            {
                entity.HasKey(e => e.emp_Id)
                    .HasName("PK_tbEmployees_emp_Id");

                entity.ToTable("tbEmployees", "Gral");

                entity.Property(e => e.emp_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.emp_DateModified).HasColumnType("datetime");

                entity.HasOne(d => d.are)
                    .WithMany(p => p.tbEmployees)
                    .HasForeignKey(d => d.are_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.occ)
                    .WithMany(p => p.tbEmployees)
                    .HasForeignKey(d => d.occ_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.per)
                    .WithMany(p => p.tbEmployees)
                    .HasForeignKey(d => d.per_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<tbEventLog>(entity =>
            {
                entity.HasKey(e => e.event_Id)
                    .HasName("PK_tbEventLog_event_Id");

                entity.ToTable("tbEventLog", "Logs");

                entity.Property(e => e.event_CreationDate).HasColumnType("datetime");

                entity.Property(e => e.event_Details).IsRequired();

                entity.Property(e => e.event_IpAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.event_UserAgent).IsRequired();

                entity.HasOne(d => d.event_EventtypeNavigation)
                    .WithMany(p => p.tbEventLog)
                    .HasForeignKey(d => d.event_Eventtype)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbEventLog_event_Eventtype");
            });

            modelBuilder.Entity<tbEventLogType>(entity =>
            {
                entity.HasKey(e => e.etype_Id)
                    .HasName("PK_tbEventLogType_etype_Id");

                entity.ToTable("tbEventLogType", "Logs");

                entity.Property(e => e.etype_Id).ValueGeneratedNever();

                entity.Property(e => e.etype_Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<tbMarketingDetails>(entity =>
            {
                entity.HasKey(e => e.mde_Id)
                    .HasName("PK_Vent_tbMarketingDetails_mde_Id");

                entity.ToTable("tbMarketingDetails", "Vent");

                entity.Property(e => e.mde_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.mde_DateModified).HasColumnType("datetime");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbMarketingDetails)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbMarketingDetails_cus_Id_Clte_tbCustomers_cus_Id");

                entity.HasOne(d => d.mhe)
                    .WithMany(p => p.tbMarketingDetails)
                    .HasForeignKey(d => d.mhe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbMarketingDetails_mhe_Id_Vent_tbMarketingHeaders_mhe_Id");
            });

            modelBuilder.Entity<tbMarketingHeaders>(entity =>
            {
                entity.HasKey(e => e.mhe_Id)
                    .HasName("PK_Vent_tbMarketingHeaders_mhe_Id");

                entity.ToTable("tbMarketingHeaders", "Vent");

                entity.Property(e => e.mhe_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.mhe_DateModified).HasColumnType("datetime");

                entity.Property(e => e.mhe_Description).HasMaxLength(100);
            });

            modelBuilder.Entity<tbMeetings>(entity =>
            {
                entity.HasKey(e => e.met_Id)
                    .HasName("PK_Clte_tbMeetings_met_Id");

                entity.ToTable("tbMeetings", "Clte");

                entity.Property(e => e.met_Date).HasColumnType("date");

                entity.Property(e => e.met_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.met_DateModified).HasColumnType("datetime");

                entity.Property(e => e.met_EndTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.met_MeetingLink).IsRequired();

                entity.Property(e => e.met_StartTime)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.met_Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbMeetings)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PK_Clte_tbMeetings__tbCustomers_cus_Id");
            });

            modelBuilder.Entity<tbMeetingsDetails>(entity =>
            {
                entity.HasKey(e => e.mde_Id)
                    .HasName("PK_Clte_tbMeetingsDetails_mde_Id");

                entity.ToTable("tbMeetingsDetails", "Clte");

                entity.Property(e => e.mde_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.mde_DateModified).HasColumnType("datetime");

                entity.HasOne(d => d.cont)
                    .WithMany(p => p.tbMeetingsDetails)
                    .HasForeignKey(d => d.cont_Id)
                    .HasConstraintName("FK_Clte_tbMeetingsDetails_cont_Id_Clte_tbContacts_cont_Id");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbMeetingsDetails)
                    .HasForeignKey(d => d.cus_Id)
                    .HasConstraintName("FK_Clte_tbMeetingsDetails_cus_Id_Clte_tbCustomers_cus_Id");

                entity.HasOne(d => d.emp)
                    .WithMany(p => p.tbMeetingsDetails)
                    .HasForeignKey(d => d.emp_Id)
                    .HasConstraintName("FK_Clte_tbMeetingsDetails_emp_Id_Gral_tbEmployees_emp_Id");

                entity.HasOne(d => d.met)
                    .WithMany(p => p.tbMeetingsDetails)
                    .HasForeignKey(d => d.met_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clte_tbMeetingsDetails_met_Id_Clte_tbMeetings_met_Id");
            });

            modelBuilder.Entity<tbModuleItems>(entity =>
            {
                entity.HasKey(e => e.mit_Id)
                    .HasName("PK_Acce_tbModulosPantallas_modpt_Id");

                entity.ToTable("tbModuleItems", "Acce");

                entity.Property(e => e.mit_Descripction)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.mod)
                    .WithMany(p => p.tbModuleItems)
                    .HasForeignKey(d => d.mod_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbModulos_tbModuleItems_mod_Id");
            });

            modelBuilder.Entity<tbModules>(entity =>
            {
                entity.HasKey(e => e.mod_Id)
                    .HasName("PK_Acce_tbModules_mod_Id");

                entity.ToTable("tbModules", "Acce");

                entity.Property(e => e.mod_Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.com)
                    .WithMany(p => p.tbModules)
                    .HasForeignKey(d => d.com_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbComponents_tbModules_comp_Id");
            });

            modelBuilder.Entity<tbMunicipalities>(entity =>
            {
                entity.HasKey(e => new { e.mun_Id, e.dep_Id })
                    .HasName("PK_Gral_tbMunicipalities_mun_Id");

                entity.ToTable("tbMunicipalities", "Gral");

                entity.Property(e => e.mun_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.mun_Code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.mun_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.mun_DateModified).HasColumnType("datetime");

                entity.Property(e => e.mun_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.dep)
                    .WithMany(p => p.tbMunicipalities)
                    .HasForeignKey(d => d.dep_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbDepartments_tbMunicipalities_dep_Id");

                entity.HasOne(d => d.mun_IdUserCreateNavigation)
                    .WithMany(p => p.tbMunicipalitiesmun_IdUserCreateNavigation)
                    .HasForeignKey(d => d.mun_IdUserCreate)
                    .HasConstraintName("FK_Gral_tbUsers_tbMunicipalities_mpio_IdUserCreate");

                entity.HasOne(d => d.mun_IdUserModifiedNavigation)
                    .WithMany(p => p.tbMunicipalitiesmun_IdUserModifiedNavigation)
                    .HasForeignKey(d => d.mun_IdUserModified)
                    .HasConstraintName("FK_Gral_tbUsers_tbMunicipalities_mpio_IdUserModified");
            });

            modelBuilder.Entity<tbOccupations>(entity =>
            {
                entity.HasKey(e => e.occ_Id)
                    .HasName("PK_tbOccupations_occ_Id");

                entity.ToTable("tbOccupations", "Gral");

                entity.Property(e => e.occ_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.occ_DateModified).HasColumnType("datetime");

                entity.Property(e => e.occ_Description).HasMaxLength(100);
            });

            modelBuilder.Entity<tbOrderDetails>(entity =>
            {
                entity.HasKey(e => e.ode_Id)
                    .HasName("PK_Vent_tbOrderDetails_ode_Id");

                entity.ToTable("tbOrderDetails", "Vent");

                entity.Property(e => e.ode_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.ode_DateModified).HasColumnType("datetime");

                entity.Property(e => e.ode_TotalPrice).HasColumnType("decimal(12, 5)");

                entity.HasOne(d => d.pro)
                    .WithMany(p => p.tbOrderDetails)
                    .HasForeignKey(d => d.pro_Id)
                    .HasConstraintName("FK_Vent_tbOrderDetails_pro_Id_Vent_tbProducts_pro_Id");

                entity.HasOne(d => d.sor)
                    .WithMany(p => p.tbOrderDetails)
                    .HasForeignKey(d => d.sor_Id)
                    .HasConstraintName("FK_Vent_tbOrderDetails_sor_Id_tbSaleOrders");
            });

            modelBuilder.Entity<tbPersons>(entity =>
            {
                entity.HasKey(e => e.per_Id)
                    .HasName("PK_Gral_tbPersons_per_Id");

                entity.ToTable("tbPersons", "Gral");

                entity.HasIndex(e => e.per_Identidad, "UQ_Gral_tbPersons_per_Identidad")
                    .IsUnique();

                entity.Property(e => e.per_BirthDate).HasColumnType("date");

                entity.Property(e => e.per_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.per_DateModified).HasColumnType("datetime");

                entity.Property(e => e.per_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.per_Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.per_Esciv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.per_Firstname)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.per_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.per_LastNames)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.per_Phone)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.per_Secondname).HasMaxLength(20);

                entity.Property(e => e.per_Sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.dep)
                    .WithMany(p => p.tbPersons)
                    .HasForeignKey(d => d.dep_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbDepartments_tbPersons_dep_Id");

                entity.HasOne(d => d.per_IdUserModifiedNavigation)
                    .WithMany(p => p.tbPersons)
                    .HasForeignKey(d => d.per_IdUserModified)
                    .HasConstraintName("FK_Acce_tbUsers_tbPersons_pers_IdUserModified");

                entity.HasOne(d => d.tbMunicipalities)
                    .WithMany(p => p.tbPersons)
                    .HasForeignKey(d => new { d.mun_Id, d.dep_Id })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gral_tbMunicipalities_tbPersons_mun_Id");
            });

            modelBuilder.Entity<tbPriorities>(entity =>
            {
                entity.HasKey(e => e.pry_Id)
                    .HasName("PK_Clte_tbPriorities_pry_Id");

                entity.ToTable("tbPriorities", "Clte");

                entity.Property(e => e.pry_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.pry_DateModified).HasColumnType("datetime");

                entity.Property(e => e.pry_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbProducts>(entity =>
            {
                entity.HasKey(e => e.pro_Id)
                    .HasName("PK_Vent_tbProducts_pro_Id");

                entity.ToTable("tbProducts", "Vent");

                entity.Property(e => e.pro_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.pro_DateModified).HasColumnType("datetime");

                entity.Property(e => e.pro_Description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.pro_ISV).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.pro_PurchasePrice).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.pro_SalesPrice).HasColumnType("numeric(8, 2)");

                entity.HasOne(d => d.scat)
                    .WithMany(p => p.tbProducts)
                    .HasForeignKey(d => d.scat_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbProducts_scat_Id_Vent_tbSubCategories_scat_Id");

                entity.HasOne(d => d.uni)
                    .WithMany(p => p.tbProducts)
                    .HasForeignKey(d => d.uni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbProducts_uni_Id_Vent_tbUnits_uni_Id");
            });

            modelBuilder.Entity<tbRoleModuleItems>(entity =>
            {
                entity.HasKey(e => e.rmi_Id)
                    .HasName("PK_Acce_tbRolModulesScreen_rmi_Id");

                entity.ToTable("tbRoleModuleItems", "Acce");

                entity.HasOne(d => d.mit)
                    .WithMany(p => p.tbRoleModuleItems)
                    .HasForeignKey(d => d.mit_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbModuleItems_tbRolModulesScreen_mit_Id");

                entity.HasOne(d => d.rol)
                    .WithMany(p => p.tbRoleModuleItems)
                    .HasForeignKey(d => d.rol_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbRoles_tbRolModulesScreen_rol_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.rol_Id)
                    .HasName("PK_Acce_tbRoles_rol_Id");

                entity.ToTable("tbRoles", "Acce");

                entity.HasIndex(e => e.rol_Description, "UQ_Acce_tbRoles_rol_Description")
                    .IsUnique();

                entity.Property(e => e.rol_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.rol_DateModified).HasColumnType("datetime");

                entity.Property(e => e.rol_Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.rol_IdUserCreateNavigation)
                    .WithMany(p => p.tbRolesrol_IdUserCreateNavigation)
                    .HasForeignKey(d => d.rol_IdUserCreate)
                    .HasConstraintName("FK_Acce_tbUsers_tbRoles_rol_IdUserCreate");

                entity.HasOne(d => d.rol_IdUserModifiedNavigation)
                    .WithMany(p => p.tbRolesrol_IdUserModifiedNavigation)
                    .HasForeignKey(d => d.rol_IdUserModified)
                    .HasConstraintName("FK_Acce_tbUsers_tbRoles_rol_IdUserModified");
            });

            modelBuilder.Entity<tbSaleOrders>(entity =>
            {
                entity.HasKey(e => e.sor_Id)
                    .HasName("PK_Vent_tbSaleOrders_sor_Id");

                entity.ToTable("tbSaleOrders", "Vent");

                entity.Property(e => e.sor_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.sor_DateModified).HasColumnType("datetime");

                entity.HasOne(d => d.cot)
                    .WithMany(p => p.tbSaleOrders)
                    .HasForeignKey(d => d.cot_Id)
                    .HasConstraintName("FK_Vent_tbSaleOrders_cot_Id_Vent_tbCotizations_cot_Id");

                entity.HasOne(d => d.cus)
                    .WithMany(p => p.tbSaleOrders)
                    .HasForeignKey(d => d.cus_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbSaleOrders_cus_Id_Clte_tbCustomers_cus_Id");

                entity.HasOne(d => d.sta)
                    .WithMany(p => p.tbSaleOrders)
                    .HasForeignKey(d => d.sta_Id)
                    .HasConstraintName("FK_Vent_tbSaleOrders_sta_Id_Vent_tbStates_sta_Id");
            });

            modelBuilder.Entity<tbStates>(entity =>
            {
                entity.HasKey(e => e.sta_Id)
                    .HasName("PK_Gral_tbStates_sta_Id");

                entity.ToTable("tbStates", "Gral");

                entity.Property(e => e.sta_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.sta_DateModified).HasColumnType("datetime");

                entity.Property(e => e.sta_Description).HasMaxLength(100);
            });

            modelBuilder.Entity<tbSubCategories>(entity =>
            {
                entity.HasKey(e => e.scat_Id)
                    .HasName("PK_Vent_tbSubCategories_scat_Id");

                entity.ToTable("tbSubCategories", "Vent");

                entity.Property(e => e.scat_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.scat_DateModified).HasColumnType("datetime");

                entity.Property(e => e.scat_Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cat)
                    .WithMany(p => p.tbSubCategories)
                    .HasForeignKey(d => d.cat_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vent_tbSubCategories_cat_Id_Vent_tbCategories_cat_Id");
            });

            modelBuilder.Entity<tbTypeChannels>(entity =>
            {
                entity.HasKey(e => e.tyCh_Id)
                    .HasName("PK_Clte_tbTypeChannels_tyCh_Id");

                entity.ToTable("tbTypeChannels", "Clte");

                entity.Property(e => e.tyCh_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.tyCh_DateModified).HasColumnType("datetime");

                entity.Property(e => e.tyCh_Description)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbUnits>(entity =>
            {
                entity.HasKey(e => e.uni_Id)
                    .HasName("PK_Vent_tbUnits_uni_Id");

                entity.ToTable("tbUnits", "Vent");

                entity.Property(e => e.uni_Abrevitation)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.uni_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.uni_DateModified).HasColumnType("datetime");

                entity.Property(e => e.uni_Description)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbUsers>(entity =>
            {
                entity.HasKey(e => e.usu_Id)
                    .HasName("PK_Acce_tbUsers_usu_Id");

                entity.ToTable("tbUsers", "Acce");

                entity.HasIndex(e => e.usu_UserName, "UQ_Acce_tbUsers_usu_UserName")
                    .IsUnique();

                entity.Property(e => e.usu_DateCreate).HasColumnType("datetime");

                entity.Property(e => e.usu_DateModified).HasColumnType("datetime");

                entity.Property(e => e.usu_Password).IsRequired();

                entity.Property(e => e.usu_PasswordSalt).IsRequired();

                entity.Property(e => e.usu_UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Per)
                    .WithMany(p => p.tbUsers)
                    .HasForeignKey(d => d.Per_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acce_tbPersons_tbUsers_per_Id");

                entity.HasOne(d => d.rol)
                    .WithMany(p => p.tbUsers)
                    .HasForeignKey(d => d.rol_Id)
                    .HasConstraintName("FK_Acce_tbUsers_tbrol_rol_Id");

                entity.HasOne(d => d.usu_IdUserModifiedNavigation)
                    .WithMany(p => p.Inverseusu_IdUserModifiedNavigation)
                    .HasForeignKey(d => d.usu_IdUserModified)
                    .HasConstraintName("FK_Acce_tbUsers_tbUsers_usu_IdUserModified");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}